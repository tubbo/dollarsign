{"version":3,"sources":["nquery.js"],"names":["NQuery","scope","selector","document","events","map","elements","each","forEach","event","callback","element","addEventListener","removeEventListener","delete","dispatchEvent","updates","Object","keys","rule","style","attribute","value","parents","parent","name","result","classList","includes","add","remove","nodes","querySelectorAll","push","length","fn","prototype","$"],"mappings":"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","file":"nquery.js","sourcesContent":["/**\n * The NQuery object represents a collection of DOM elements grouped by the given\n * `selector`. Wraps basic browser functionality into a more consistent\n * and concise API.\n *\n * @author Tom Scott <tubbo@psychedeli.ca>\n */\nclass NQuery {\n  /**\n   * @constructor\n   */\n  constructor(scope, selector) {\n    this.document = scope;\n    this.selector = selector;\n    this.events = {};\n    this.map = this.elements.map;\n    this.each = this.elements.forEach;\n  }\n\n  /**\n   * All elements matching the given `selector`.\n   *\n   * @return {Array<HTMLNode>}\n   */\n  get elements() {\n    var nodes = [];\n\n    if (typeof this.document === 'array') {\n      this.document.forEach(function(scope) {\n        scope.querySelectorAll(this.selector).forEach(function(element) {\n          nodes.push(element);\n        });\n      });\n    } else {\n      nodes = this.document.querySelectorAll(this.selector) || [];\n    }\n\n    return nodes;\n  }\n\n  get length() {\n    return this.elements.length;\n  }\n\n  /**\n   * Iterate over every element with the given callback function.\n   *\n   * @function each\n   * @param {function} callback - Function to call on each iteration.\n   * @return {NQuery} this object\n   */\n\n  /**\n   * Iterate over every element with the given callback function and\n   * return a new array with the return result of each callback.\n   *\n   * @function map\n   * @param {function} callback - Function to call on each iteration.\n   *                              Each return value becomes part of the Array returned.\n   * @return {Array}\n   */\n\n\n  /**\n   * Bind an event to the elements in this selection.\n   *\n   * @param {string} event - Name of the event to be bound.\n   * @param {function} callback - Callback function to be executed when\n   * event fires.\n   * @return {NQuery} this object\n   */\n  on(event, callback) {\n    this.each(element => element.addEventListener(event, callback));\n    this.events[event] = callback;\n    return this;\n  }\n\n  /**\n   * Unbind an event from the elements in this selection.\n   *\n   * @param {string} event - Name of the event to be unbound.\n   * @return {NQuery} this object\n   */\n  off(event) {\n    this.each(element => element.removeEventListener(event));\n    this.events.delete(event);\n    return this;\n  }\n\n  /**\n   * Trigger an event on all elements in this object.\n   *\n   * @param {string} event - Name of the event to trigger.\n   * @return {NQuery} this object\n   */\n  fire(event) {\n    return this.each((element) => element.dispatchEvent(event));\n  }\n\n  /**\n   * Alter CSS for all elements in the selection.\n   *\n   * @param {object} updates - Hash of CSS rules to apply to each element.\n   * @return {NQuery} this object\n   */\n  css(updates = {}) {\n    Object.keys(updates).forEach(function(rule) {\n      this.each(function(element) {\n        element.style[rule] = updates[rule];\n      });\n    });\n    return this;\n  }\n\n  /**\n   * Alter attributes for all elements in the selection.\n   *\n   * @param {object} updates - Hash of attribute updates to apply to each element.\n   * @return {NQuery} this object\n   */\n  attr(updates = {}) {\n    Object.keys(updates).forEach(function(attribute) {\n      this.each(element => element[attribute] = value);\n    });\n    return this;\n  }\n\n  /**\n   * Return an NQuery object for DOM elements undernerath this selector.\n   *\n   * @param {string} selector - CSS selector to search for.\n   * @return {NQuery} New NQuery object representing selection.\n   */\n  find(selector) {\n    return new NQuery(this.elements, selector);\n  }\n\n  /**\n   * Return an NQuery object for DOM elements above this selector.\n   *\n   * @param {string} selector - CSS Selector to search for.\n   * @return {NQuery} New NQuery object representing selection.\n   */\n  closest(selector) {\n    var parents = this.map((element) => element.parent);\n    return new NQuery(parents, selector);\n  }\n\n  /**\n   * Test whether the given class is associated with these elements.\n   *\n   * @param {string} name\n   * @return {boolean} `true` if class is applied to given element, `false` otherwise.\n   */\n  hasClass(name) {\n    var result = true;\n    this.each(function(element) {\n      if (result) {\n        result = element.classList.includes(name);\n      }\n    });\n    return result;\n  }\n\n  /**\n   * Add class name to elements in query.\n   *\n   * @param {string} name - Name of the class to add.\n   * @return {NQuery} this object.\n   */\n  addClass(name) {\n    this.each(function(element) {\n      element.classList.add(name);\n    });\n    return this;\n  }\n\n  /**\n   * Remove class name from elements in query.\n   *\n   * @param {string} name - Name of the class to remove.\n   * @return {NQuery} this object.\n   */\n  removeClass(name) {\n    this.each(function(element) {\n      element.classList.remove(name);\n    });\n    return this;\n  }\n}\n\n/**\n * The plugin interface for NQuery. Add new methods to the NQuery object\n * with `NQuery.fn.myNewMethod = function(args) { ... }`\n *\n * @function NQuery.fn\n */\nNQuery.fn = NQuery.prototype;\n\n/**\n * Create a new NQuery object using the given selector and scope. If no\n * scope is provided, use the `document` to get the global page scope.\n *\n * @function $\n * @param {string} selector - Query to run for selecting elements.\n * @param {HTMLNode} scope - DOM to manipulate. Default: `document`.\n * @return {NQuery} the object created from selector and scope.\n * @author Tom Scott <tubbo@psychedeli.ca>\n */\nfunction $(selector, scope = document) {\n  return new NQuery(scope, selector);\n}\n"]}