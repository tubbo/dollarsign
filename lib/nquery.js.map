{"version":3,"sources":["nquery.js"],"names":["selector","scope","document","NQuery","options","events","callback","elements","forEach","map","event","each","element","addEventListener","removeEventListener","delete","dispatchEvent","updates","Object","keys","rule","style","attribute","value","parent","name","classes","includes","hasClass","_updateClass","splice","indexOf","class","join","getElementsBySelector","concat","split"],"mappings":"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","file":"nquery.js","sourcesContent":["/**\n * Represents a collection of DOM elements grouped by the given\n * `selector`. Wraps basic browser functionality into a more consistent\n * and concise API.\n *\n * @author Tom Scott <tubbo@psychedeli.ca>\n */\nexport class NQuery {\n  /**\n   * @constructor\n   */\n  constructor(scope, selector) {\n    this.document = scope;\n    this.selector = options.selector;\n    this.events = {};\n  }\n\n  /**\n   * All elements matching the given `selector`.\n   */\n  get elements() {\n    return this.document.getElementsBySelector(this.selector);\n  }\n\n  /**\n   * All CSS classes associated with this element.\n   */\n  get classes() {\n    return [].concat(this.map((element) => element.class.split(\"\\s\")));\n  }\n\n  /**\n   * Iterate over every element with the given callback function.\n   *\n   * @param {function} callback - Function to call on each iteration.\n   * @return {NQuery} this object\n   */\n  each(callback) {\n    this.elements.forEach(callback);\n    return this;\n  }\n\n  /**\n   * Iterate over every element with the given callback function and\n   * return a new array with the return result of each callback.\n   *\n    * @param {function} callback - Function to call on each iteration.\n    *                              Each return value becomes part of the Array returned.\n   * @return {Array}\n   */\n  map(callback) {\n    return this.elements.map(callback);\n  }\n\n  /**\n   * Bind an event to the elements in this selection.\n   *\n   * @param {string} event - Name of the event to be bound.\n   * @param {function} callback - Callback function to be executed when\n   * event fires.\n   * @return {NQuery} this object\n   */\n  on(event, callback) {\n    this.each(element => element.addEventListener(event, callback));\n    this.events[event] = callback;\n    return this;\n  }\n\n  /**\n   * Unbind an event from the elements in this selection.\n   *\n   * @param {string} event - Name of the event to be unbound.\n   * @return {NQuery} this object\n   */\n  off(event) {\n    this.each(element => element.removeEventListener(event));\n    this.events.delete(event);\n    return this;\n  }\n\n  /**\n   * Trigger an event on all elements in this object.\n   * @param {string} event - Name of the event to trigger.\n   * @return {NQuery} this object\n   */\n  fire(event) {\n    return this.each((element) => element.dispatchEvent(event));\n  }\n\n  /**\n   * Alter CSS for all elements in the selection.\n   *\n   * @param {object} updates - Hash of CSS rules to apply to each element.\n   * @return {NQuery} this object\n   */\n  css(updates = {}) {\n    Object.keys(updates).forEach(function(rule) {\n      this.each(function(element) {\n        element.style[rule] = updates[rule];\n      });\n    });\n    return this;\n  }\n\n  /**\n   * Alter attributes for all elements in the selection.\n   *\n   * @param {object} updates - Hash of attribute updates to apply to each element.\n   * @return {NQuery} this object\n   */\n  attr(updates = {}) {\n    Object.keys(updates).forEach(function(attribute) {\n      this.each(element => element[attribute] = value);\n    });\n    return this;\n  }\n\n  /**\n   * Return an NQuery object for DOM elements undernerath this selector.\n   *\n   * @param {string} selector - CSS selector to search for.\n   * @return {NQuery} New NQuery object representing selection.\n   */\n  find(selector) {\n    return new NQuery(this.elements[0], selector);\n  }\n\n  /**\n   * Return an NQuery object for DOM elements above this selector.\n   *\n   * @param {string} selector - CSS Selector to search for.\n   * @return {NQuery} New NQuery object representing selection.\n   */\n  closest(selector) {\n    return new NQuery(this.elements[0].parent, selector);\n  }\n\n  /**\n   * Test whether the given class is associated with these elements.\n   *\n   * @param {string} name\n   * @return {boolean} `true` if class is applied to given element, `false` otherwise.\n   */\n  hasClass(name) {\n    return this.classes.includes(name);\n  }\n\n  /**\n   * Add class name to elements in query.\n   *\n   * @param {string} name - Name of the class to add.\n   * @return {NQuery} this object.\n   */\n  addClass(name) {\n    if (!this.hasClass(name)) {\n      this.classes += name;\n    }\n    return _updateClass();\n  }\n\n  /**\n   * Remove class name from elements in query.\n   *\n   * @param {string} name - Name of the class to remove.\n   * @return {NQuery} this object.\n   */\n  removeClass(name) {\n    if (this.hasClass(name)) {\n      this.classes = this.classes.splice(this.classes.indexOf(name), 1);\n      return _updateClass();\n    } else {\n      return this;\n    }\n  }\n\n  /**\n   * Update class name of elements in query with the array stored in\n   * `classes`.\n   *\n   * @private\n   * @return {NQuery} this object.\n   */\n  _updateClass() {\n    return this.each((element) => element.class = this.classes.join(\"\\s\"));\n  }\n}\n\n/**\n * Create a new NQuery object using the given selector and scope. If no\n * scope is provided, use the `document` to get the global page scope.\n *\n * @module nquery\n * @function $\n * @param {string} selector - Query to run for selecting elements.\n * @param {HTMLNode} scope - DOM to manipulate. Default: `document`.\n * @return {NQuery} the object created from selector and scope.\n * @author Tom Scott <tubbo@psychedeli.ca>\n */\nexport default function(selector, scope = document) {\n  return new NQuery(scope, selector);\n}\n"]}